{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('./util'),\n    encodeText = _require.encodeText;\n/** @typedef {import('./types').CodecFactory} CodecFactory */\n\n/** @typedef {import(\"./types\").BaseName} BaseName */\n\n/** @typedef {import(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\n\n\nvar Base =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  function Base(name, code, factory, alphabet) {\n    _classCallCheck(this, Base);\n\n    this.name = name;\n    this.code = code;\n    this.codeBuf = encodeText(this.code);\n    this.alphabet = alphabet;\n    this.codec = factory(alphabet);\n  }\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n\n\n  _createClass(Base, [{\n    key: \"encode\",\n    value: function encode(buf) {\n      return this.codec.encode(buf);\n    }\n    /**\n     * @param {string} string\n     * @returns {Uint8Array}\n     */\n\n  }, {\n    key: \"decode\",\n    value: function decode(string) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = string[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var char = _step.value;\n\n          if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n            throw new Error(\"invalid character '\".concat(char, \"' in '\").concat(string, \"'\"));\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return this.codec.decode(string);\n    }\n  }]);\n\n  return Base;\n}();\n\nmodule.exports = Base;","map":null,"metadata":{},"sourceType":"script"}