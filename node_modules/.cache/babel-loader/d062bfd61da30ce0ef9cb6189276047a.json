{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar CID = require('cids');\n\nvar multicodec = require('multicodec');\n\nvar multihashing = require('multihashing-async');\n\nvar multihash = multihashing.multihash;\nvar codec = multicodec.DAG_PB;\nvar defaultHashAlg = multihash.names['sha2-256'];\n/**\n * @typedef {object} GenCIDOptions - Options to create the CID\n * @property {CID.CIDVersion} [cidVersion=1] - CID version number\n * @property {multihashing.multihash.HashCode} [hashAlg=multihash.names['sha2-256']] - Defaults to the defaultHashAlg of the format\n */\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n * @param {GenCIDOptions} [userOptions] - Options to create the CID\n */\n\nvar cid =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(binaryBlob) {\n    var userOptions,\n        options,\n        hashName,\n        hash,\n        codecName,\n        cid,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            userOptions = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            options = {\n              cidVersion: userOptions.cidVersion == null ? 1 : userOptions.cidVersion,\n              hashAlg: userOptions.hashAlg == null ? defaultHashAlg : userOptions.hashAlg\n            };\n            hashName = multihash.codes[options.hashAlg];\n            _context.next = 5;\n            return multihashing(binaryBlob, hashName);\n\n          case 5:\n            hash = _context.sent;\n            codecName = multicodec.getNameFromCode(codec);\n            cid = new CID(options.cidVersion, codecName, hash);\n            return _context.abrupt(\"return\", cid);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function cid(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = {\n  codec: codec,\n  defaultHashAlg: defaultHashAlg,\n  cid: cid\n};","map":null,"metadata":{},"sourceType":"script"}