{"ast":null,"code":"'use strict';\n\nvar _asyncToGenerator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _regeneratorRuntime = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar CID = require('cids');\n\nvar multihashing = require('multihashing-async');\n\nvar multihash = multihashing.multihash;\n\nvar multicodec = require('multicodec');\n/**\n * @typedef {import('cids').CIDVersion} CIDVersion\n * @typedef {import('multihashing-async').multihash.HashCode} HashCode\n * @typedef {import('interface-ipld-format').Format<Uint8Array>} RawFormat\n */\n\n/**\n * Binary resolver\n *\n * @type {RawFormat}\n */\n\n\nmodule.exports = {\n  codec: multicodec.RAW,\n  defaultHashAlg: multihash.names['sha2-256'],\n  resolver: {\n    /**\n     * Resolves a path within a Raw block.\n     *\n     * Always returns the raw data as value without any remainderPath.\n     *\n     * @param {Uint8Array} binaryBlob - Binary representation of a PB block\n     * @param {string} [path='/'] - Path that should be resolved.  Must be '/' or an exception is thrown\n     */\n    resolve: function resolve(binaryBlob, path) {\n      if (path !== '/') {\n        throw new Error('Only the root path / may be resolved');\n      }\n\n      return {\n        value: binaryBlob,\n        remainderPath: ''\n      };\n    },\n\n    /**\n     * Return all available paths of a block.\n     *\n     * @generator\n     * @param {Uint8Array} binaryBlob - The raw data\n     */\n    tree: function tree(binaryBlob) {\n      return _wrapAsyncGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  },\n  util: {\n    /**\n     * @param {Uint8Array} data\n     */\n    deserialize: function deserialize(data) {\n      return data;\n    },\n\n    /**\n     * @param {Uint8Array} data\n     */\n    serialize: function serialize(data) {\n      return data;\n    },\n\n    /**\n     * Calculate the CID of the binary blob.\n     *\n     * @param {Uint8Array} binaryBlob - Encoded IPLD Node\n     * @param {Object} [userOptions] - Options to create the CID\n     * @param {CIDVersion} [userOptions.cidVersion=1] - CID version number\n     * @param {HashCode} [userOptions.hashAlg=multihash.names['sha2-256']] - Defaults to the defaultHashAlg of the format\n     */\n    cid: function () {\n      var _cid = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(binaryBlob) {\n        var userOptions,\n            options,\n            hashName,\n            hash,\n            codecName,\n            cid,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                userOptions = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n                options = {\n                  cidVersion: userOptions.cidVersion == null ? 1 : userOptions.cidVersion,\n                  hashAlg: userOptions.hashAlg == null ? module.exports.defaultHashAlg : userOptions.hashAlg\n                };\n                hashName = multihash.codes[options.hashAlg];\n                _context2.next = 5;\n                return multihashing(binaryBlob, hashName);\n\n              case 5:\n                hash = _context2.sent;\n                codecName = multicodec.getNameFromCode(module.exports.codec);\n                cid = new CID(options.cidVersion, codecName, hash);\n                return _context2.abrupt(\"return\", cid);\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function cid(_x) {\n        return _cid.apply(this, arguments);\n      }\n\n      return cid;\n    }()\n  }\n};","map":null,"metadata":{},"sourceType":"script"}