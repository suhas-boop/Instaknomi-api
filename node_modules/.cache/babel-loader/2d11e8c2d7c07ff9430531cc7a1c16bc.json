{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Client = require('../../lib/core');\n\nvar toUrlSearchParams = require('../../lib/to-url-search-params');\n/**\n * @typedef {import('../../types').Options} Options\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').Credentials} Credentials\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinService} RemotePinService\n * @typedef {import('ipfs-core-types/src/pin/remote/service').RemotePinServiceWithStat} RemotePinServiceWithStat\n * @typedef {import('../../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pin/remote/service').API<HTTPClientExtraOptions>} RemotePiningServiceAPI\n */\n\n\nvar Service =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @param {Options} options\n   */\n  function Service(options) {\n    _classCallCheck(this, Service);\n\n    this.client = new Client(options);\n  }\n  /**\n   * @param {URL} url\n   */\n\n\n  _createClass(Service, null, [{\n    key: \"encodeEndpoint\",\n    value: function encodeEndpoint(url) {\n      var href = String(url);\n\n      if (href === 'undefined') {\n        throw Error('endpoint is required');\n      } // Workaround trailing `/` issue in go-ipfs\n      // @see https://github.com/ipfs/go-ipfs/issues/7826\n\n\n      return href[href.length - 1] === '/' ? href.slice(0, -1) : href;\n    }\n    /**\n     * @param {any} json\n     * @returns {RemotePinServiceWithStat}\n     */\n\n  }, {\n    key: \"decodeRemoteService\",\n    value: function decodeRemoteService(json) {\n      return _objectSpread({\n        service: json.Service,\n        endpoint: new URL(json.ApiEndpoint)\n      }, json.Stat && {\n        stat: Service.decodeStat(json.Stat)\n      });\n    }\n    /**\n     * @param {any} json\n     * @returns {import('ipfs-core-types/src/pin/remote/service').Stat}\n     */\n\n  }, {\n    key: \"decodeStat\",\n    value: function decodeStat(json) {\n      switch (json.Status) {\n        case 'valid':\n          {\n            var _json$PinCount = json.PinCount,\n                Pinning = _json$PinCount.Pinning,\n                Pinned = _json$PinCount.Pinned,\n                Queued = _json$PinCount.Queued,\n                Failed = _json$PinCount.Failed;\n            return {\n              status: 'valid',\n              pinCount: {\n                queued: Queued,\n                pinning: Pinning,\n                pinned: Pinned,\n                failed: Failed\n              }\n            };\n          }\n\n        case 'invalid':\n          {\n            return {\n              status: 'invalid'\n            };\n          }\n\n        default:\n          {\n            return {\n              status: json.Status\n            };\n          }\n      }\n    }\n  }]);\n\n  return Service;\n}();\n/**\n * @type {RemotePiningServiceAPI[\"add\"]}\n */\n\n\nService.prototype.add =\n/*#__PURE__*/\nfunction () {\n  var _add = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(name, options) {\n    var endpoint, key, headers, timeout, signal;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            endpoint = options.endpoint, key = options.key, headers = options.headers, timeout = options.timeout, signal = options.signal;\n            _context.next = 3;\n            return this.client.post('pin/remote/service/add', {\n              timeout: timeout,\n              signal: signal,\n              searchParams: toUrlSearchParams({\n                arg: [name, Service.encodeEndpoint(endpoint), key]\n              }),\n              headers: headers\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n\n  function add(_x, _x2) {\n    return _add.apply(this, arguments);\n  }\n\n  return add;\n}();\n/**\n * @type {RemotePiningServiceAPI[\"rm\"]}\n */\n\n\nService.prototype.rm =\n/*#__PURE__*/\nfunction () {\n  var _rm = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(name) {\n    var options,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            _context2.next = 3;\n            return this.client.post('pin/remote/service/rm', {\n              timeout: options.timeout,\n              signal: options.signal,\n              headers: options.headers,\n              searchParams: toUrlSearchParams({\n                arg: name\n              })\n            });\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n\n  function rm(_x3) {\n    return _rm.apply(this, arguments);\n  }\n\n  return rm;\n}();\n/**\n * @type {RemotePiningServiceAPI[\"ls\"]}\n */\n\n\nService.prototype.ls =\n/*#__PURE__*/\nfunction () {\n  var _ls = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3() {\n    var options,\n        stat,\n        headers,\n        timeout,\n        signal,\n        response,\n        _ref,\n        RemoteServices,\n        _args3 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n            // @ts-ignore cannot derive option type from typedef\n            stat = options.stat, headers = options.headers, timeout = options.timeout, signal = options.signal;\n            _context3.next = 4;\n            return this.client.post('pin/remote/service/ls', {\n              timeout: timeout,\n              signal: signal,\n              headers: headers,\n              searchParams: stat === true ? toUrlSearchParams({\n                stat: stat\n              }) : undefined\n            });\n\n          case 4:\n            response = _context3.sent;\n            _context3.next = 7;\n            return response.json();\n\n          case 7:\n            _ref = _context3.sent;\n            RemoteServices = _ref.RemoteServices;\n            return _context3.abrupt(\"return\", RemoteServices.map(Service.decodeRemoteService));\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n\n  function ls() {\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n}();\n\nmodule.exports = Service;","map":null,"metadata":{},"sourceType":"script"}