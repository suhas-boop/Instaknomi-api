{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar configure = require('../lib/configure');\n\nvar multicodec = require('multicodec');\n\nvar loadFormat = require('../lib/ipld-formats');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dag').API<HTTPClientExtraOptions>} DAGAPI\n */\n\n\nmodule.exports = configure(function (api, opts) {\n  var getBlock = require('../block/get')(opts);\n\n  var dagResolve = require('./resolve')(opts);\n\n  var load = loadFormat(opts.ipld);\n  /**\n   * @type {DAGAPI[\"get\"]}\n   */\n\n  var get =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(cid) {\n      var options,\n          resolved,\n          block,\n          codecName,\n          format,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return dagResolve(cid, options);\n\n            case 3:\n              resolved = _context.sent;\n              _context.next = 6;\n              return getBlock(resolved.cid, options);\n\n            case 6:\n              block = _context.sent;\n              codecName = multicodec.getName(resolved.cid.code);\n              _context.next = 10;\n              return load(codecName);\n\n            case 10:\n              format = _context.sent;\n\n              if (resolved.cid.code === multicodec.RAW && !resolved.remainderPath) {\n                resolved.remainderPath = '/';\n              }\n\n              return _context.abrupt(\"return\", format.resolver.resolve(block.data, resolved.remainderPath || ''));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function get(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return get;\n});","map":null,"metadata":{},"sourceType":"script"}