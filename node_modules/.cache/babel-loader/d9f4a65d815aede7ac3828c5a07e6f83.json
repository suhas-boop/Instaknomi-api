{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar errCode = require('err-code');\n\nvar CID = require('cids');\n/**\n * @typedef {Object} Pinnable\n * @property {string | InstanceType<typeof window.String> | CID} [path]\n * @property {CID} [cid]\n * @property {boolean} [recursive]\n * @property {any} [metadata]\n *\n * @typedef {CID|string|InstanceType<typeof window.String>|Pinnable} ToPin\n * @typedef {ToPin|Iterable<ToPin>|AsyncIterable<ToPin>} Source\n *\n * @typedef {Object} Pin\n * @property {string|CID} path\n * @property {boolean} recursive\n * @property {any} [metadata]\n */\n\n/**\n * Transform one of:\n *\n * ```ts\n * CID\n * String\n * { cid: CID recursive, metadata }\n * { path: String recursive, metadata }\n * Iterable<CID>\n * Iterable<String>\n * Iterable<{ cid: CID recursive, metadata }>\n * Iterable<{ path: String recursive, metadata }>\n * AsyncIterable<CID>\n * AsyncIterable<String>\n * AsyncIterable<{ cid: CID recursive, metadata }>\n * AsyncIterable<{ path: String recursive, metadata }>\n * ```\n * Into:\n *\n * ```ts\n * AsyncIterable<{ path: CID|String, recursive:boolean, metadata }>\n * ```\n *\n * @param {Source} input\n * @returns {AsyncIterable<Pin>}\n */\n// eslint-disable-next-line complexity\n\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  var _normaliseInput = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(input) {\n    var iterator, first, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, cid, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, obj, _iterator5, _first, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _cid, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, _obj;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 2:\n            if (!CID.isCID(input)) {\n              _context.next = 6;\n              break;\n            }\n\n            _context.next = 5;\n            return toPin({\n              cid: input\n            });\n\n          case 5:\n            return _context.abrupt(\"return\");\n\n          case 6:\n            if (!(input instanceof String || typeof input === 'string')) {\n              _context.next = 10;\n              break;\n            }\n\n            _context.next = 9;\n            return toPin({\n              path: input\n            });\n\n          case 9:\n            return _context.abrupt(\"return\");\n\n          case 10:\n            if (!(input.cid != null || input.path != null)) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 13;\n            return toPin(input);\n\n          case 13:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 14:\n            if (!(Symbol.iterator in input)) {\n              _context.next = 80;\n              break;\n            }\n\n            // @ts-ignore\n            iterator = input[Symbol.iterator]();\n            first = iterator.next();\n\n            if (!first.done) {\n              _context.next = 19;\n              break;\n            }\n\n            return _context.abrupt(\"return\", iterator);\n\n          case 19:\n            if (!(CID.isCID(first.value) || first.value instanceof String || typeof first.value === 'string')) {\n              _context.next = 49;\n              break;\n            }\n\n            _context.next = 22;\n            return toPin({\n              cid: first.value\n            });\n\n          case 22:\n            _iteratorNormalCompletion3 = true;\n            _didIteratorError3 = false;\n            _iteratorError3 = undefined;\n            _context.prev = 25;\n            _iterator3 = iterator[Symbol.iterator]();\n\n          case 27:\n            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n              _context.next = 34;\n              break;\n            }\n\n            cid = _step3.value;\n            _context.next = 31;\n            return toPin({\n              cid: cid\n            });\n\n          case 31:\n            _iteratorNormalCompletion3 = true;\n            _context.next = 27;\n            break;\n\n          case 34:\n            _context.next = 40;\n            break;\n\n          case 36:\n            _context.prev = 36;\n            _context.t0 = _context[\"catch\"](25);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context.t0;\n\n          case 40:\n            _context.prev = 40;\n            _context.prev = 41;\n\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n\n          case 43:\n            _context.prev = 43;\n\n            if (!_didIteratorError3) {\n              _context.next = 46;\n              break;\n            }\n\n            throw _iteratorError3;\n\n          case 46:\n            return _context.finish(43);\n\n          case 47:\n            return _context.finish(40);\n\n          case 48:\n            return _context.abrupt(\"return\");\n\n          case 49:\n            if (!(first.value.cid != null || first.value.path != null)) {\n              _context.next = 79;\n              break;\n            }\n\n            _context.next = 52;\n            return toPin(first.value);\n\n          case 52:\n            _iteratorNormalCompletion4 = true;\n            _didIteratorError4 = false;\n            _iteratorError4 = undefined;\n            _context.prev = 55;\n            _iterator4 = iterator[Symbol.iterator]();\n\n          case 57:\n            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {\n              _context.next = 64;\n              break;\n            }\n\n            obj = _step4.value;\n            _context.next = 61;\n            return toPin(obj);\n\n          case 61:\n            _iteratorNormalCompletion4 = true;\n            _context.next = 57;\n            break;\n\n          case 64:\n            _context.next = 70;\n            break;\n\n          case 66:\n            _context.prev = 66;\n            _context.t1 = _context[\"catch\"](55);\n            _didIteratorError4 = true;\n            _iteratorError4 = _context.t1;\n\n          case 70:\n            _context.prev = 70;\n            _context.prev = 71;\n\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n\n          case 73:\n            _context.prev = 73;\n\n            if (!_didIteratorError4) {\n              _context.next = 76;\n              break;\n            }\n\n            throw _iteratorError4;\n\n          case 76:\n            return _context.finish(73);\n\n          case 77:\n            return _context.finish(70);\n\n          case 78:\n            return _context.abrupt(\"return\");\n\n          case 79:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 80:\n            if (!(Symbol.asyncIterator in input)) {\n              _context.next = 164;\n              break;\n            }\n\n            // @ts-ignore\n            _iterator5 = input[Symbol.asyncIterator]();\n            _context.next = 84;\n            return _awaitAsyncGenerator(_iterator5.next());\n\n          case 84:\n            _first = _context.sent;\n\n            if (!_first.done) {\n              _context.next = 87;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _iterator5);\n\n          case 87:\n            if (!(CID.isCID(_first.value) || _first.value instanceof String || typeof _first.value === 'string')) {\n              _context.next = 125;\n              break;\n            }\n\n            _context.next = 90;\n            return toPin({\n              cid: _first.value\n            });\n\n          case 90:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 92;\n            _iterator = _asyncIterator(_iterator5);\n\n          case 94:\n            _context.next = 96;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 96:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 100;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 100:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 108;\n              break;\n            }\n\n            _cid = _value;\n            _context.next = 105;\n            return toPin({\n              cid: _cid\n            });\n\n          case 105:\n            _iteratorNormalCompletion = true;\n            _context.next = 94;\n            break;\n\n          case 108:\n            _context.next = 114;\n            break;\n\n          case 110:\n            _context.prev = 110;\n            _context.t2 = _context[\"catch\"](92);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 114:\n            _context.prev = 114;\n            _context.prev = 115;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 119;\n              break;\n            }\n\n            _context.next = 119;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 119:\n            _context.prev = 119;\n\n            if (!_didIteratorError) {\n              _context.next = 122;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 122:\n            return _context.finish(119);\n\n          case 123:\n            return _context.finish(114);\n\n          case 124:\n            return _context.abrupt(\"return\");\n\n          case 125:\n            if (!(_first.value.cid != null || _first.value.path != null)) {\n              _context.next = 163;\n              break;\n            }\n\n            _context.next = 128;\n            return toPin(_first.value);\n\n          case 128:\n            _iteratorNormalCompletion2 = true;\n            _didIteratorError2 = false;\n            _context.prev = 130;\n            _iterator2 = _asyncIterator(_iterator5);\n\n          case 132:\n            _context.next = 134;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 134:\n            _step2 = _context.sent;\n            _iteratorNormalCompletion2 = _step2.done;\n            _context.next = 138;\n            return _awaitAsyncGenerator(_step2.value);\n\n          case 138:\n            _value2 = _context.sent;\n\n            if (_iteratorNormalCompletion2) {\n              _context.next = 146;\n              break;\n            }\n\n            _obj = _value2;\n            _context.next = 143;\n            return toPin(_obj);\n\n          case 143:\n            _iteratorNormalCompletion2 = true;\n            _context.next = 132;\n            break;\n\n          case 146:\n            _context.next = 152;\n            break;\n\n          case 148:\n            _context.prev = 148;\n            _context.t3 = _context[\"catch\"](130);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t3;\n\n          case 152:\n            _context.prev = 152;\n            _context.prev = 153;\n\n            if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n              _context.next = 157;\n              break;\n            }\n\n            _context.next = 157;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 157:\n            _context.prev = 157;\n\n            if (!_didIteratorError2) {\n              _context.next = 160;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 160:\n            return _context.finish(157);\n\n          case 161:\n            return _context.finish(152);\n\n          case 162:\n            return _context.abrupt(\"return\");\n\n          case 163:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 164:\n            throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 165:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[25, 36, 40, 48], [41,, 43, 47], [55, 66, 70, 78], [71,, 73, 77], [92, 110, 114, 124], [115,, 119, 123], [130, 148, 152, 162], [153,, 157, 161]]);\n  }));\n\n  function normaliseInput(_x) {\n    return _normaliseInput.apply(this, arguments);\n  }\n\n  return normaliseInput;\n}();\n/**\n * @param {Pinnable} input\n */\n\n\nfunction toPin(input) {\n  var path = input.cid || \"\".concat(input.path);\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  /** @type {Pin} */\n\n\n  var pin = {\n    path: path,\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}","map":null,"metadata":{},"sourceType":"script"}