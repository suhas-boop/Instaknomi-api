{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _awaitAsyncGenerator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar CID = require('cids');\n\nvar _require = require('multiaddr'),\n    Multiaddr = _require.Multiaddr;\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n\nvar _require2 = require('./response-types'),\n    Provider = _require2.Provider;\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/dht').API<HTTPClientExtraOptions>} DHTAPI\n */\n\n\nmodule.exports = configure(function (api) {\n  /**\n   * @type {DHTAPI[\"findProvs\"]}\n   */\n  function findProvs(_x) {\n    return _findProvs.apply(this, arguments);\n  }\n\n  function _findProvs() {\n    _findProvs = _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(cid) {\n      var options,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          message,\n          _iteratorNormalCompletion2,\n          _didIteratorError2,\n          _iteratorError2,\n          _iterator2,\n          _step2,\n          _step2$value,\n          ID,\n          Addrs,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.next = 3;\n              return _awaitAsyncGenerator(api.post('dht/findprovs', {\n                timeout: options.timeout,\n                signal: options.signal,\n                searchParams: toUrlSearchParams(_objectSpread({\n                  arg: \"\".concat(new CID(cid))\n                }, options)),\n                headers: options.headers\n              }));\n\n            case 3:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 6;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 8:\n              _context.next = 10;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 10:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 14;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 14:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 47;\n                break;\n              }\n\n              message = _value;\n\n              if (!(message.Type === Provider && message.Responses)) {\n                _context.next = 44;\n                break;\n              }\n\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _iteratorError2 = undefined;\n              _context.prev = 21;\n              _iterator2 = message.Responses[Symbol.iterator]();\n\n            case 23:\n              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                _context.next = 30;\n                break;\n              }\n\n              _step2$value = _step2.value, ID = _step2$value.ID, Addrs = _step2$value.Addrs;\n              _context.next = 27;\n              return {\n                id: ID,\n                addrs: (Addrs || []).map(function (\n                /** @type {string} **/\n                a) {\n                  return new Multiaddr(a);\n                })\n              };\n\n            case 27:\n              _iteratorNormalCompletion2 = true;\n              _context.next = 23;\n              break;\n\n            case 30:\n              _context.next = 36;\n              break;\n\n            case 32:\n              _context.prev = 32;\n              _context.t0 = _context[\"catch\"](21);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t0;\n\n            case 36:\n              _context.prev = 36;\n              _context.prev = 37;\n\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n\n            case 39:\n              _context.prev = 39;\n\n              if (!_didIteratorError2) {\n                _context.next = 42;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 42:\n              return _context.finish(39);\n\n            case 43:\n              return _context.finish(36);\n\n            case 44:\n              _iteratorNormalCompletion = true;\n              _context.next = 8;\n              break;\n\n            case 47:\n              _context.next = 53;\n              break;\n\n            case 49:\n              _context.prev = 49;\n              _context.t1 = _context[\"catch\"](6);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n\n            case 53:\n              _context.prev = 53;\n              _context.prev = 54;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 58;\n                break;\n              }\n\n              _context.next = 58;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 58:\n              _context.prev = 58;\n\n              if (!_didIteratorError) {\n                _context.next = 61;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 61:\n              return _context.finish(58);\n\n            case 62:\n              return _context.finish(53);\n\n            case 63:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[6, 49, 53, 63], [21, 32, 36, 44], [37,, 39, 43], [54,, 58, 62]]);\n    }));\n    return _findProvs.apply(this, arguments);\n  }\n\n  return findProvs;\n});","map":null,"metadata":{},"sourceType":"script"}