{"ast":null,"code":"import _toConsumableArray from \"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Decentragram from '../abis/Decentragram.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport { Buffer } from 'buffer';\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar projectId = '2E2LX2eXVa4xFatC5RAj7tcsnsT';\nvar projectSecret = '025d00d55d27dd1c9bf60c49fd38bd99';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, decentragram, imagesCount, i, image;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Load account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                console.log(accounts);\n                this.setState({\n                  account: accounts[0]\n                }); // Network ID\n\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                networkData = Decentragram.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 30;\n                  break;\n                }\n\n                decentragram = new web3.eth.Contract(Decentragram.abi, networkData.address);\n                this.setState({\n                  decentragram: decentragram\n                });\n                _context3.next = 15;\n                return decentragram.methods.imageCount().call();\n\n              case 15:\n                imagesCount = _context3.sent;\n                this.setState({\n                  imagesCount: imagesCount\n                }); //Load images\n\n                i = 1;\n\n              case 18:\n                if (!(i <= imagesCount)) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                _context3.next = 21;\n                return decentragram.methods.images(i).call();\n\n              case 21:\n                image = _context3.sent;\n                this.setState({\n                  images: [].concat(_toConsumableArray(this.state.images), [image])\n                });\n\n              case 23:\n                i++;\n                _context3.next = 18;\n                break;\n\n              case 26:\n                // Sort images. Show highest tipped images first\n                this.setState({\n                  images: this.state.images.sort(function (a, b) {\n                    return b.tipAmount - a.tipAmount;\n                  })\n                });\n                this.setState({\n                  loading: false\n                });\n                _context3.next = 31;\n                break;\n\n              case 30:\n                window.alert('Decentragram contract not deployed to detected network.');\n\n              case 31:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"tipImageOwner\",\n    value: function tipImageOwner(id, tipAmount) {\n      var _this2 = this;\n\n      this.setState({\n        loading: true\n      });\n      this.state.decentragram.methods.tipImageOwner(id).send({\n        from: this.state.account,\n        value: tipAmount\n      }).on('transactionHash', function (hash) {\n        _this2.setState({\n          loading: false\n        });\n      });\n    }\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.captureFile = function (event) {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log('buffer', _this.state.buffer);\n      };\n    };\n\n    _this.uploadImage = function (description) {\n      console.log(\"Submitting file to ipfs...\");\n      var buffer = _this.state.buffer;\n      var file;\n\n      function upload() {\n        return _upload.apply(this, arguments);\n      }\n\n      function _upload() {\n        _upload = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee4() {\n          var auth, client;\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  console.log(\"Submitting file to ipfs...\");\n                  auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\n                  _context4.next = 4;\n                  return ipfsClient.create({\n                    host: 'ipfs.infura.io',\n                    port: 5001,\n                    protocol: 'https',\n                    apiPath: '/api/v0',\n                    headers: {\n                      authorization: auth\n                    }\n                  });\n\n                case 4:\n                  client = _context4.sent;\n                  _context4.prev = 5;\n                  _context4.next = 8;\n                  return client.add(buffer);\n\n                case 8:\n                  file = _context4.sent;\n                  console.log(file);\n                  console.log(file.path);\n                  console.log(typeof file.path);\n                  return _context4.abrupt(\"return\", file);\n\n                case 15:\n                  _context4.prev = 15;\n                  _context4.t0 = _context4[\"catch\"](5);\n                  console.log(_context4.t0);\n\n                case 18:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, null, [[5, 15]]);\n        }));\n        return _upload.apply(this, arguments);\n      }\n\n      var promise = upload();\n      promise.then(function (data) {\n        console.log(data.path);\n\n        _this.setState({\n          loading: true\n        });\n\n        _this.state.decentragram.methods.uploadImage(String(data.path), description).send({\n          from: _this.state.account\n        }).on('transactionHash', function (path) {\n          _this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      decentragram: null,\n      images: [],\n      loading: true\n    };\n    _this.uploadImage = _this.uploadImage.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.tipImageOwner = _this.tipImageOwner.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.captureFile = _this.captureFile.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), this.state.loading ? React.createElement(\"div\", {\n        id: \"loader\",\n        className: \"text-center mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, \"Loading...\")) : React.createElement(Main, {\n        images: this.state.images,\n        captureFile: this.captureFile,\n        uploadImage: this.uploadImage,\n        tipImageOwner: this.tipImageOwner,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/src/components/App.js"],"names":["React","Component","Web3","Decentragram","Navbar","Main","Buffer","ipfsClient","require","projectId","projectSecret","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","networkData","networks","decentragram","Contract","abi","address","methods","imageCount","call","imagesCount","i","images","image","state","sort","a","b","tipAmount","loading","id","tipImageOwner","send","from","value","on","hash","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","result","uploadImage","description","upload","auth","toString","create","host","port","protocol","apiPath","headers","authorization","client","add","path","promise","then","data","String","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Decentragram from '../abis/Decentragram.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport { Buffer } from 'buffer';\n\nconst ipfsClient = require('ipfs-http-client')\nconst projectId = '2E2LX2eXVa4xFatC5RAj7tcsnsT'\nconst projectSecret = '025d00d55d27dd1c9bf60c49fd38bd99'\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    console.log(accounts)\n    this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = Decentragram.networks[networkId]\n    if(networkData) {\n      const decentragram = new web3.eth.Contract(Decentragram.abi, networkData.address)\n      this.setState({ decentragram })\n      const imagesCount = await decentragram.methods.imageCount().call()\n      this.setState({ imagesCount })\n      //Load images\n      for (var i = 1; i <= imagesCount; i++) {\n        const image = await decentragram.methods.images(i).call()\n        this.setState({\n          images: [...this.state.images, image]\n        })\n      }\n      // Sort images. Show highest tipped images first\n      this.setState({\n        images: this.state.images.sort((a,b) => b.tipAmount - a.tipAmount )\n      })\n      this.setState({ loading: false})\n    } else {\n      window.alert('Decentragram contract not deployed to detected network.')\n    }\n  }\n\n\n  captureFile = event => {\n\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n\n  tipImageOwner(id, tipAmount) {\n    this.setState({ loading: true })\n    this.state.decentragram.methods.tipImageOwner(id).send({ from: this.state.account, value: tipAmount }).on('transactionHash', (hash) => {\n      this.setState({ loading: false })\n    })\n  }\n\n  uploadImage = description => {\n    console.log(\"Submitting file to ipfs...\")\n    const buffer=this.state.buffer\n    var file;\n    async function upload() {\n      console.log(\"Submitting file to ipfs...\")\n      const auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\n      \n       const client = await ipfsClient.create({\n          host: 'ipfs.infura.io',\n          port: 5001,\n          protocol: 'https',\n          apiPath: '/api/v0',\n          headers: {\n            authorization: auth\n          }\n        })\n      \n      try {\n          file = await client.add(buffer)\n          console.log(file)\n          console.log(file.path)\n          console.log(typeof file.path);\n          return file\n      \n          } catch (error) {\n            console.log(error)\n          }\n      \n      }\n      const promise = upload();\n      promise.then((data) => {\n        console.log(data.path);\n        this.setState({ loading: true })\n        this.state.decentragram.methods.uploadImage(String(data.path), description).send({ from: this.state.account }).on('transactionHash', (path) => {\n        this.setState({ loading: false })\n      })\n      })\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: '',\n      decentragram: null,\n      images: [],\n      loading: true\n    }\n\n    this.uploadImage = this.uploadImage.bind(this)\n    this.tipImageOwner = this.tipImageOwner.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar account={this.state.account} />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n                images={this.state.images}\n                captureFile={this.captureFile}\n                uploadImage={this.uploadImage}\n                tipImageOwner={this.tipImageOwner}\n            />\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}