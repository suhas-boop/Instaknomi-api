{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _asyncIterator = require(\"/Users/shreyassheshagiri/Downloads/Blockchain-based-social-media-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncIterator\");\n\nvar uint8ArrayFromString = require('uint8arrays/from-string');\n\nvar uint8ArrayToString = require('uint8arrays/to-string');\n\nvar log = require('debug')('ipfs-http-client:pubsub:subscribe');\n\nvar configure = require('../lib/configure');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params');\n/**\n * @typedef {import('../types').HTTPClientExtraOptions} HTTPClientExtraOptions\n * @typedef {import('ipfs-core-types/src/pubsub').Message} Message\n * @typedef {(err: Error, fatal: boolean, msg?: Message) => void} ErrorHandlerFn\n * @typedef {import('ipfs-core-types/src/pubsub').API<HTTPClientExtraOptions & { onError?: ErrorHandlerFn }>} PubsubAPI\n * @typedef {import('../types').Options} Options\n */\n\n/**\n * @param {Options} options\n * @param {import('./subscription-tracker')} subsTracker\n */\n\n\nmodule.exports = function (options, subsTracker) {\n  return configure(function (api) {\n    /**\n     * @type {PubsubAPI[\"subscribe\"]}\n     */\n    function subscribe(_x, _x2) {\n      return _subscribe.apply(this, arguments);\n    }\n\n    function _subscribe() {\n      _subscribe = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(topic, handler) {\n        var options,\n            done,\n            fail,\n            result,\n            ffWorkaround,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                // eslint-disable-line require-await\n                options.signal = subsTracker.subscribe(topic, handler, options.signal);\n                /** @type {(value?: any) => void} */\n\n                result = new Promise(function (resolve, reject) {\n                  done = resolve;\n                  fail = reject;\n                }); // In Firefox, the initial call to fetch does not resolve until some data\n                // is received. If this doesn't happen within 1 second assume success\n\n                ffWorkaround = setTimeout(function () {\n                  return done();\n                }, 1000); // Do this async to not block Firefox\n\n                setTimeout(function () {\n                  api.post('pubsub/sub', {\n                    timeout: options.timeout,\n                    signal: options.signal,\n                    searchParams: toUrlSearchParams(_objectSpread({\n                      arg: topic\n                    }, options)),\n                    headers: options.headers\n                  }).catch(function (err) {\n                    // Initial subscribe fail, ensure we clean up\n                    subsTracker.unsubscribe(topic, handler);\n                    fail(err);\n                  }).then(function (response) {\n                    clearTimeout(ffWorkaround);\n\n                    if (!response) {\n                      // if there was no response, the subscribe failed\n                      return;\n                    }\n\n                    readMessages(response, {\n                      onMessage: handler,\n                      onEnd: function onEnd() {\n                        return subsTracker.unsubscribe(topic, handler);\n                      },\n                      onError: options.onError\n                    });\n                    done();\n                  });\n                }, 0);\n                return _context.abrupt(\"return\", result);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _subscribe.apply(this, arguments);\n    }\n\n    return subscribe;\n  })(options);\n};\n/**\n * @param {import('ipfs-utils/src/types').ExtendedResponse} response\n * @param {object} options\n * @param {(message: Message) => void} options.onMessage\n * @param {() => void} options.onEnd\n * @param {ErrorHandlerFn} [options.onError]\n */\n\n\nfunction readMessages(_x3, _x4) {\n  return _readMessages.apply(this, arguments);\n}\n/**\n * @param {Error & {type?:string}} error\n * @returns {boolean}\n */\n\n\nfunction _readMessages() {\n  _readMessages = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(response, _ref) {\n    var onMessage, onEnd, onError, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, msg;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            onMessage = _ref.onMessage, onEnd = _ref.onEnd, onError = _ref.onError;\n            onError = onError || log;\n            _context2.prev = 2;\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context2.prev = 5;\n            _iterator = _asyncIterator(response.ndjson());\n\n          case 7:\n            _context2.next = 9;\n            return _iterator.next();\n\n          case 9:\n            _step = _context2.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context2.next = 13;\n            return _step.value;\n\n          case 13:\n            _value = _context2.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context2.next = 29;\n              break;\n            }\n\n            msg = _value;\n            _context2.prev = 16;\n\n            if (msg.from) {\n              _context2.next = 19;\n              break;\n            }\n\n            return _context2.abrupt(\"continue\", 26);\n\n          case 19:\n            onMessage({\n              from: uint8ArrayToString(uint8ArrayFromString(msg.from, 'base64pad'), 'base58btc'),\n              data: uint8ArrayFromString(msg.data, 'base64pad'),\n              seqno: uint8ArrayFromString(msg.seqno, 'base64pad'),\n              topicIDs: msg.topicIDs\n            });\n            _context2.next = 26;\n            break;\n\n          case 22:\n            _context2.prev = 22;\n            _context2.t0 = _context2[\"catch\"](16);\n            _context2.t0.message = \"Failed to parse pubsub message: \".concat(_context2.t0.message);\n            onError(_context2.t0, false, msg); // Not fatal\n\n          case 26:\n            _iteratorNormalCompletion = true;\n            _context2.next = 7;\n            break;\n\n          case 29:\n            _context2.next = 35;\n            break;\n\n          case 31:\n            _context2.prev = 31;\n            _context2.t1 = _context2[\"catch\"](5);\n            _didIteratorError = true;\n            _iteratorError = _context2.t1;\n\n          case 35:\n            _context2.prev = 35;\n            _context2.prev = 36;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context2.next = 40;\n              break;\n            }\n\n            _context2.next = 40;\n            return _iterator.return();\n\n          case 40:\n            _context2.prev = 40;\n\n            if (!_didIteratorError) {\n              _context2.next = 43;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 43:\n            return _context2.finish(40);\n\n          case 44:\n            return _context2.finish(35);\n\n          case 45:\n            _context2.next = 50;\n            break;\n\n          case 47:\n            _context2.prev = 47;\n            _context2.t2 = _context2[\"catch\"](2);\n\n            if (!isAbortError(_context2.t2)) {\n              onError(_context2.t2, true); // Fatal\n            }\n\n          case 50:\n            _context2.prev = 50;\n            onEnd();\n            return _context2.finish(50);\n\n          case 53:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[2, 47, 50, 53], [5, 31, 35, 45], [16, 22], [36,, 40, 44]]);\n  }));\n  return _readMessages.apply(this, arguments);\n}\n\nvar isAbortError = function isAbortError(error) {\n  switch (error.type) {\n    case 'aborted':\n      return true;\n    // It is `abort` in Electron instead of `aborted`\n\n    case 'abort':\n      return true;\n\n    default:\n      // FIXME: In testing with Chrome, err.type is undefined (should not be!)\n      // Temporarily use the name property instead.\n      return error.name === 'AbortError';\n  }\n};","map":null,"metadata":{},"sourceType":"script"}